name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test data files
      working-directory: ./backend
      run: |
        mkdir -p app/data data
        echo "[]" > app/data/ratings.json
        echo "{}" > app/data/recommendations.json
        echo "[]" > app/data/penalties.json
        echo "[]" > app/data/watchlist.json
        if [ ! -f data/users.csv ]; then
          echo "id,username,email,hashed_password,role,created_at" > data/users.csv
        fi

    - name: Run all tests
      working-directory: ./backend
      run: |
        python -m pytest -v --cov=app --cov-report=html

    - name: Copy coverage reports
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: ./backend
      run: |
        mkdir -p ../testing-documents/coverage
        cp -r htmlcov ../testing-documents/coverage/htmlcov

    - name: Commit coverage reports
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: ./
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add testing-documents/coverage/
        git commit -m "Add backend coverage reports [ci skip]" || echo "No changes to commit"
        git push origin main
  
  frontend-tests:
    if: github.event_name == 'pull_request'
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || true
      continue-on-error: true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
  
  code-quality:
    if: github.event_name == 'pull_request'
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run flake8
      working-directory: ./backend
      run: flake8 app --max-line-length=120 --extend-ignore=E203,W503
      continue-on-error: true
    
    - name: Run black (check only)
      working-directory: ./backend
      run: black --check app
      continue-on-error: true
    
    - name: Run isort (check only)
      working-directory: ./backend
      run: isort --check-only app
      continue-on-error: true

  docker-publish:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create required files
      run: |
        mkdir -p backend/app/data backend/data
        echo "[]" > backend/app/data/ratings.json
        echo "{}" > backend/app/data/recommendations.json
        echo "[]" > backend/app/data/penalties.json
        echo "[]" > backend/app/data/watchlist.json
        if [ ! -f backend/data/users.csv ]; then
          echo "id,username,email,password,role,created_at" > backend/data/users.csv
          echo "1,admin,admin@test.com,\$2b\$12\$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewY5GyYuL0WkZk3G,admin,2025-01-01T00:00:00" >> backend/data/users.csv
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max